[{"C:\\Users\\paulm\\Documents\\Local Programming\\Websites\\SnowFinder\\frontend\\src\\index.tsx":"1","C:\\Users\\paulm\\Documents\\Local Programming\\Websites\\SnowFinder\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\paulm\\Documents\\Local Programming\\Websites\\SnowFinder\\frontend\\src\\App.tsx":"3","C:\\Users\\paulm\\Documents\\Local Programming\\Websites\\SnowFinder\\frontend\\src\\hooks\\useStomp.ts":"4","C:\\Users\\paulm\\Documents\\Local Programming\\Websites\\SnowFinder\\frontend\\src\\classes\\CityResponse.ts":"5","C:\\Users\\paulm\\Documents\\Local Programming\\Websites\\SnowFinder\\frontend\\src\\classes\\ZipCodeRequest.ts":"6","C:\\Users\\paulm\\Documents\\Local Programming\\Websites\\SnowFinder\\frontend\\src\\hooks\\useParseSnowResults.ts":"7"},{"size":554,"mtime":1680109904716,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1680109903806,"results":"10","hashOfConfig":"9"},{"size":4991,"mtime":1680296310577,"results":"11","hashOfConfig":"9"},{"size":1610,"mtime":1680284356885,"results":"12","hashOfConfig":"9"},{"size":777,"mtime":1680285835252,"results":"13","hashOfConfig":"9"},{"size":216,"mtime":1680283814264,"results":"14","hashOfConfig":"9"},{"size":1594,"mtime":1680288613193,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1gvbf0m",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\paulm\\Documents\\Local Programming\\Websites\\SnowFinder\\frontend\\src\\index.tsx",[],[],[],"C:\\Users\\paulm\\Documents\\Local Programming\\Websites\\SnowFinder\\frontend\\src\\reportWebVitals.ts",[],[],"C:\\Users\\paulm\\Documents\\Local Programming\\Websites\\SnowFinder\\frontend\\src\\App.tsx",["39","40","41","42","43"],[],"import React, { createRef, useEffect, useRef, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport useStomp from './hooks/useStomp';\nimport useLoadSnowResults from './hooks/useParseSnowResults';\nimport ZipCodeRequest from './classes/ZipCodeRequest';\n\nconst SOCKET_URL = 'ws://localhost:8080/snow-finder';\n\nconst snowballFight = require('./resources/snowball-fight-cropped.gif');\nconst SNOWBALL_FIGHT_RESTART_SECS = 15;\n\nfunction App() {\n\n    const { message, send } = useStomp(SOCKET_URL);\n    const { citiesWithSnow, toLoadNumber, loadedNumber, city, log, reset } = useLoadSnowResults({ message });\n\n    const [zipCode, setZipCode] = useState(0);\n    const [radius, setRadius] = useState(0);\n    const [searchType, setSearchType] = useState('zipCode'); // 'id' prop of radio button checked\n\n    const snowballFightRef = useRef<HTMLImageElement>(null);\n\n    const onTabChange = (e: any) => {\n        setSearchType(String(e.target.id));\n    }\n\n    const submit = () => {\n        reset();\n        if (searchType === 'zipCode') {\n            send('/find/snowUsingZip', JSON.stringify(new ZipCodeRequest(zipCode, radius)))\n        } else {\n            send(\"/find/snowInUS\");\n        }\n    }\n\n    useEffect(() => {\n        setTimeout(restartSnowballFight, Math.random() * SNOWBALL_FIGHT_RESTART_SECS * 1000);\n    }, [snowballFightRef.current?.getAttribute('src')]);\n\n    const restartSnowballFight = () => {\n        if (!snowballFightRef.current) return;\n\n        let s = snowballFightRef.current.getAttribute('src');\n        snowballFightRef.current.setAttribute('src', '');\n        snowballFightRef.current.setAttribute('src', s ?? '');\n    }\n\n    return (\n        <div className={'body'}>\n            <div className='blueSky'></div>\n            <div className='inputContainer'>\n                <h1>SnowFinder</h1>\n                <div className='tabs d-inline'>\n                    <input \n                        className='tab invisible' \n                        type=\"radio\" \n                        id=\"zipCode\" \n                        name=\"findType\" \n                        value=\"snowUsingZip\" \n                        onChange={onTabChange}\n                        checked={searchType === 'zipCode'}\n                    />\n                    <label \n                        className={`tabLabel ${searchType === 'zipCode' ? 'activeTab' : ''}`} \n                        htmlFor=\"zipCode\"\n                    >\n                        Zip Code Radius\n                    </label>\n                    <span>|</span>\n                    <input \n                        className='tab invisible' \n                        type=\"radio\" \n                        id=\"USCities\" \n                        name=\"findType\" \n                        value=\"snowInUS\" \n                        onChange={onTabChange}\n                        checked={searchType === 'USCities'}\n                    />\n                    <label \n                        className={`tabLabel ${searchType === 'USCities' ? 'activeTab' : ''}`}  \n                        htmlFor=\"USCities\"\n                    >\n                        Major US Cities\n                    </label>\n                </div>\n                {searchType === 'zipCode' ? (\n                    <div className='d-inline'>\n                        <label>\n                            Search Location:\n                        </label>\n                        <input \n                            className='input'\n                            type={'text'} \n                            placeholder={'Zip Code'}\n                            value={zipCode}\n                            onChange={(e) => setZipCode(Number(e.target.value))}\n                        />\n                        <input \n                            className='input'\n                            type={'text'} \n                            placeholder={'Radius'}\n                            value={radius}\n                            onChange={(e) => setRadius(Number(e.target.value))}\n                        />\n                    </div>\n                ) : null}\n                \n                <button className={searchType === 'USCities' ? 'button-majorCities' : ''} onClick={submit}>\n                    {searchType === 'USCities' ? 'Search major cities in the US' : 'Search'}\n                </button>\n                {toLoadNumber ? (\n                    <div className='results'>\n                        <div className='citiesWithSnow'>{citiesWithSnow}</div>\n                        <span>&nbsp;cities found with snow (</span>\n                        <div className='loaded'>{loadedNumber}</div>\n                        <span>&nbsp;cities searched)</span>\n\n                        <div dangerouslySetInnerHTML={{__html: log}} ></div>\n                    </div>\n                ) : null}\n            </div>\n            <img ref={snowballFightRef} src={snowballFight} className='snowball-fight' />\n        </div>\n    )\n}\n\nexport default App;","C:\\Users\\paulm\\Documents\\Local Programming\\Websites\\SnowFinder\\frontend\\src\\hooks\\useStomp.ts",[],[],"C:\\Users\\paulm\\Documents\\Local Programming\\Websites\\SnowFinder\\frontend\\src\\classes\\CityResponse.ts",[],[],"C:\\Users\\paulm\\Documents\\Local Programming\\Websites\\SnowFinder\\frontend\\src\\classes\\ZipCodeRequest.ts",[],[],"C:\\Users\\paulm\\Documents\\Local Programming\\Websites\\SnowFinder\\frontend\\src\\hooks\\useParseSnowResults.ts",[],[],{"ruleId":"44","severity":1,"message":"45","line":1,"column":17,"nodeType":"46","messageId":"47","endLine":1,"endColumn":26},{"ruleId":"44","severity":1,"message":"48","line":2,"column":8,"nodeType":"46","messageId":"47","endLine":2,"endColumn":12},{"ruleId":"44","severity":1,"message":"49","line":16,"column":57,"nodeType":"46","messageId":"47","endLine":16,"endColumn":61},{"ruleId":"50","severity":1,"message":"51","line":39,"column":9,"nodeType":"52","endLine":39,"endColumn":54},{"ruleId":"53","severity":1,"message":"54","line":123,"column":13,"nodeType":"55","endLine":123,"endColumn":90},"@typescript-eslint/no-unused-vars","'createRef' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'city' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","ChainExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]