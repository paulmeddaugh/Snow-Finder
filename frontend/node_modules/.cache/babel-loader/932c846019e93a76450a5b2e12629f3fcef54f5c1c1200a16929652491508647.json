{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/paulm/Documents/Local Programming/Websites/SnowFinder/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/paulm/Documents/Local Programming/Websites/SnowFinder/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/paulm/Documents/Local Programming/Websites/SnowFinder/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/paulm/Documents/Local Programming/Websites/SnowFinder/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { StompHandler } from './stomp-handler.js';\nimport { ActivationState, StompSocketState } from './types.js';\nimport { Versions } from './versions.js';\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\nexport var Client = /*#__PURE__*/function () {\n  /**\n   * Create an instance.\n   */\n  function Client() {\n    var conf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Client);\n    /**\n     * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\n     *\n     * Example:\n     * ```javascript\n     *        // Try only versions 1.1 and 1.0\n     *        client.stompVersions = new Versions(['1.1', '1.0'])\n     * ```\n     */\n    this.stompVersions = Versions.default;\n    /**\n     * Will retry if Stomp connection is not established in specified milliseconds.\n     * Default 0, which switches off automatic reconnection.\n     */\n    this.connectionTimeout = 0;\n    /**\n     *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n     */\n    this.reconnectDelay = 5000;\n    /**\n     * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n     */\n    this.heartbeatIncoming = 10000;\n    /**\n     * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n     */\n    this.heartbeatOutgoing = 10000;\n    /**\n     * This switches on a non-standard behavior while sending WebSocket packets.\n     * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n     * Only Java Spring brokers seem to support this mode.\n     *\n     * WebSockets, by itself, split large (text) packets,\n     * so it is not needed with a truly compliant STOMP/WebSocket broker.\n     * Setting it for such a broker will cause large messages to fail.\n     *\n     * `false` by default.\n     *\n     * Binary frames are never split.\n     */\n    this.splitLargeFrames = false;\n    /**\n     * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n     * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n     */\n    this.maxWebSocketChunkSize = 8 * 1024;\n    /**\n     * Usually the\n     * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n     * is automatically decided by type of the payload.\n     * Default is `false`, which should work with all compliant brokers.\n     *\n     * Set this flag to force binary frames.\n     */\n    this.forceBinaryWSFrames = false;\n    /**\n     * A bug in ReactNative chops a string on occurrence of a NULL.\n     * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n     * This makes incoming WebSocket messages invalid STOMP packets.\n     * Setting this flag attempts to reverse the damage by appending a NULL.\n     * If the broker splits a large message into multiple WebSocket messages,\n     * this flag will cause data loss and abnormal termination of connection.\n     *\n     * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n     */\n    this.appendMissingNULLonIncoming = false;\n    /**\n     * Browsers do not immediately close WebSockets when `.close` is issued.\n     * This may cause reconnection to take a significantly long time in case\n     *  of some types of failures.\n     * In case of incoming heartbeat failure, this experimental flag instructs\n     * the library to discard the socket immediately\n     * (even before it is actually closed).\n     */\n    this.discardWebsocketOnCommFailure = false;\n    /**\n     * Activation state.\n     *\n     * It will usually be ACTIVE or INACTIVE.\n     * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\n     */\n    this.state = ActivationState.INACTIVE;\n    // No op callbacks\n    var noOp = function noOp() {};\n    this.debug = noOp;\n    this.beforeConnect = noOp;\n    this.onConnect = noOp;\n    this.onDisconnect = noOp;\n    this.onUnhandledMessage = noOp;\n    this.onUnhandledReceipt = noOp;\n    this.onUnhandledFrame = noOp;\n    this.onStompError = noOp;\n    this.onWebSocketClose = noOp;\n    this.onWebSocketError = noOp;\n    this.logRawCommunication = false;\n    this.onChangeState = noOp;\n    // These parameters would typically get proper values before connect is called\n    this.connectHeaders = {};\n    this._disconnectHeaders = {};\n    // Apply configuration\n    this.configure(conf);\n  }\n  /**\n   * Underlying WebSocket instance, READONLY.\n   */\n  _createClass(Client, [{\n    key: \"webSocket\",\n    get: function get() {\n      var _this$_stompHandler;\n      return (_this$_stompHandler = this._stompHandler) === null || _this$_stompHandler === void 0 ? void 0 : _this$_stompHandler._webSocket;\n    }\n    /**\n     * Disconnection headers.\n     */\n  }, {\n    key: \"disconnectHeaders\",\n    get: function get() {\n      return this._disconnectHeaders;\n    },\n    set: function set(value) {\n      this._disconnectHeaders = value;\n      if (this._stompHandler) {\n        this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n      }\n    }\n    /**\n     * `true` if there is an active connection to STOMP Broker\n     */\n  }, {\n    key: \"connected\",\n    get: function get() {\n      return !!this._stompHandler && this._stompHandler.connected;\n    }\n    /**\n     * version of STOMP protocol negotiated with the server, READONLY\n     */\n  }, {\n    key: \"connectedVersion\",\n    get: function get() {\n      return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n    }\n    /**\n     * if the client is active (connected or going to reconnect)\n     */\n  }, {\n    key: \"active\",\n    get: function get() {\n      return this.state === ActivationState.ACTIVE;\n    }\n  }, {\n    key: \"_changeState\",\n    value: function _changeState(state) {\n      this.state = state;\n      this.onChangeState(state);\n    }\n    /**\n     * Update configuration.\n     */\n  }, {\n    key: \"configure\",\n    value: function configure(conf) {\n      // bulk assign all properties to this\n      Object.assign(this, conf);\n    }\n    /**\n     * Initiate the connection with the broker.\n     * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n     * it will keep trying to reconnect.\n     *\n     * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n     */\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      var _this = this;\n      var _activate = function _activate() {\n        if (_this.active) {\n          _this.debug('Already ACTIVE, ignoring request to activate');\n          return;\n        }\n        _this._changeState(ActivationState.ACTIVE);\n        _this._connect();\n      };\n      // if it is deactivating, wait for it to complete before activating.\n      if (this.state === ActivationState.DEACTIVATING) {\n        this.debug('Waiting for deactivation to finish before activating');\n        this.deactivate().then(function () {\n          _activate();\n        });\n      } else {\n        _activate();\n      }\n    }\n  }, {\n    key: \"_connect\",\n    value: function () {\n      var _connect2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n        var webSocket;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.beforeConnect();\n            case 2:\n              if (!this._stompHandler) {\n                _context.next = 5;\n                break;\n              }\n              this.debug('There is already a stompHandler, skipping the call to connect');\n              return _context.abrupt(\"return\");\n            case 5:\n              if (this.active) {\n                _context.next = 8;\n                break;\n              }\n              this.debug('Client has been marked inactive, will not attempt to connect');\n              return _context.abrupt(\"return\");\n            case 8:\n              // setup connection watcher\n              if (this.connectionTimeout > 0) {\n                // clear first\n                if (this._connectionWatcher) {\n                  clearTimeout(this._connectionWatcher);\n                }\n                this._connectionWatcher = setTimeout(function () {\n                  if (_this2.connected) {\n                    return;\n                  }\n                  // Connection not established, close the underlying socket\n                  // a reconnection will be attempted\n                  _this2.debug(\"Connection not established in \".concat(_this2.connectionTimeout, \"ms, closing socket\"));\n                  _this2.forceDisconnect();\n                }, this.connectionTimeout);\n              }\n              this.debug('Opening Web Socket...');\n              // Get the actual WebSocket (or a similar object)\n              webSocket = this._createWebSocket();\n              this._stompHandler = new StompHandler(this, webSocket, {\n                debug: this.debug,\n                stompVersions: this.stompVersions,\n                connectHeaders: this.connectHeaders,\n                disconnectHeaders: this._disconnectHeaders,\n                heartbeatIncoming: this.heartbeatIncoming,\n                heartbeatOutgoing: this.heartbeatOutgoing,\n                splitLargeFrames: this.splitLargeFrames,\n                maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n                forceBinaryWSFrames: this.forceBinaryWSFrames,\n                logRawCommunication: this.logRawCommunication,\n                appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n                discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n                onConnect: function onConnect(frame) {\n                  // Successfully connected, stop the connection watcher\n                  if (_this2._connectionWatcher) {\n                    clearTimeout(_this2._connectionWatcher);\n                    _this2._connectionWatcher = undefined;\n                  }\n                  if (!_this2.active) {\n                    _this2.debug('STOMP got connected while deactivate was issued, will disconnect now');\n                    _this2._disposeStompHandler();\n                    return;\n                  }\n                  _this2.onConnect(frame);\n                },\n                onDisconnect: function onDisconnect(frame) {\n                  _this2.onDisconnect(frame);\n                },\n                onStompError: function onStompError(frame) {\n                  _this2.onStompError(frame);\n                },\n                onWebSocketClose: function onWebSocketClose(evt) {\n                  _this2._stompHandler = undefined; // a new one will be created in case of a reconnect\n                  if (_this2.state === ActivationState.DEACTIVATING) {\n                    // Mark deactivation complete\n                    _this2._changeState(ActivationState.INACTIVE);\n                  }\n                  // The callback is called before attempting to reconnect, this would allow the client\n                  // to be `deactivated` in the callback.\n                  _this2.onWebSocketClose(evt);\n                  if (_this2.active) {\n                    _this2._schedule_reconnect();\n                  }\n                },\n                onWebSocketError: function onWebSocketError(evt) {\n                  _this2.onWebSocketError(evt);\n                },\n                onUnhandledMessage: function onUnhandledMessage(message) {\n                  _this2.onUnhandledMessage(message);\n                },\n                onUnhandledReceipt: function onUnhandledReceipt(frame) {\n                  _this2.onUnhandledReceipt(frame);\n                },\n                onUnhandledFrame: function onUnhandledFrame(frame) {\n                  _this2.onUnhandledFrame(frame);\n                }\n              });\n              this._stompHandler.start();\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _connect() {\n        return _connect2.apply(this, arguments);\n      }\n      return _connect;\n    }()\n  }, {\n    key: \"_createWebSocket\",\n    value: function _createWebSocket() {\n      var webSocket;\n      if (this.webSocketFactory) {\n        webSocket = this.webSocketFactory();\n      } else if (this.brokerURL) {\n        webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n      } else {\n        throw new Error('Either brokerURL or webSocketFactory must be provided');\n      }\n      webSocket.binaryType = 'arraybuffer';\n      return webSocket;\n    }\n  }, {\n    key: \"_schedule_reconnect\",\n    value: function _schedule_reconnect() {\n      var _this3 = this;\n      if (this.reconnectDelay > 0) {\n        this.debug(\"STOMP: scheduling reconnection in \".concat(this.reconnectDelay, \"ms\"));\n        this._reconnector = setTimeout(function () {\n          _this3._connect();\n        }, this.reconnectDelay);\n      }\n    }\n    /**\n     * Disconnect if connected and stop auto reconnect loop.\n     * Appropriate callbacks will be invoked if there is an underlying STOMP connection.\n     *\n     * This call is async. It will resolve immediately if there is no underlying active websocket,\n     * otherwise, it will resolve after the underlying websocket is properly disposed of.\n     *\n     * It is not an error to invoke this method more than once.\n     * Each of those would resolve on completion of deactivation.\n     *\n     * To reactivate, you can call [Client#activate]{@link Client#activate}.\n     *\n     * Experimental: pass `force: true` to immediately discard the underlying connection.\n     * This mode will skip both the STOMP and the Websocket shutdown sequences.\n     * In some cases, browsers take a long time in the Websocket shutdown\n     * if the underlying connection had gone stale.\n     * Using this mode can speed up.\n     * When this mode is used, the actual Websocket may linger for a while\n     * and the broker may not realize that the connection is no longer in use.\n     *\n     * It is possible to invoke this method initially without the `force` option\n     * and subsequently, say after a wait, with the `force` option.\n     */\n  }, {\n    key: \"deactivate\",\n    value: function () {\n      var _deactivate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this4 = this;\n        var options,\n          force,\n          needToDispose,\n          retPromise,\n          origOnWebSocketClose,\n          _this$_stompHandler2,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n              force = options.force || false;\n              needToDispose = this.active;\n              if (!(this.state === ActivationState.INACTIVE)) {\n                _context2.next = 6;\n                break;\n              }\n              this.debug(\"Already INACTIVE, nothing more to do\");\n              return _context2.abrupt(\"return\", Promise.resolve());\n            case 6:\n              this._changeState(ActivationState.DEACTIVATING);\n              // Clear if a reconnection was scheduled\n              if (this._reconnector) {\n                clearTimeout(this._reconnector);\n                this._reconnector = undefined;\n              }\n              if (!(this._stompHandler &&\n              // @ts-ignore - if there is a _stompHandler, there is the webSocket\n              this.webSocket.readyState !== StompSocketState.CLOSED)) {\n                _context2.next = 13;\n                break;\n              }\n              origOnWebSocketClose = this._stompHandler.onWebSocketClose; // we need to wait for the underlying websocket to close\n              retPromise = new Promise(function (resolve, reject) {\n                // @ts-ignore - there is a _stompHandler\n                _this4._stompHandler.onWebSocketClose = function (evt) {\n                  origOnWebSocketClose(evt);\n                  resolve();\n                };\n              });\n              _context2.next = 15;\n              break;\n            case 13:\n              // indicate that auto reconnect loop should terminate\n              this._changeState(ActivationState.INACTIVE);\n              return _context2.abrupt(\"return\", Promise.resolve());\n            case 15:\n              if (force) {\n                (_this$_stompHandler2 = this._stompHandler) === null || _this$_stompHandler2 === void 0 ? void 0 : _this$_stompHandler2.discardWebsocket();\n              } else if (needToDispose) {\n                this._disposeStompHandler();\n              }\n              return _context2.abrupt(\"return\", retPromise);\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function deactivate() {\n        return _deactivate.apply(this, arguments);\n      }\n      return deactivate;\n    }()\n    /**\n     * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n     * This is different from a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n     * After forcing disconnect, automatic reconnect will be attempted.\n     * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n     */\n  }, {\n    key: \"forceDisconnect\",\n    value: function forceDisconnect() {\n      if (this._stompHandler) {\n        this._stompHandler.forceDisconnect();\n      }\n    }\n  }, {\n    key: \"_disposeStompHandler\",\n    value: function _disposeStompHandler() {\n      // Dispose STOMP Handler\n      if (this._stompHandler) {\n        this._stompHandler.dispose();\n      }\n    }\n    /**\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations.\n     *\n     * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\n     *\n     * `body` must be String.\n     * You will need to covert the payload to string in case it is not string (e.g. JSON).\n     *\n     * To send a binary message body, use `binaryBody` parameter. It should be a\n     * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     * Sometimes brokers may not support binary frames out of the box.\n     * Please check your broker documentation.\n     *\n     * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n     * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n     * For binary messages, `content-length` header is always added.\n     *\n     * Caution: The broker will, most likely, report an error and disconnect\n     * if the message body has NULL octet(s) and `content-length` header is missing.\n     *\n     * ```javascript\n     *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n     *\n     *        // Only destination is mandatory parameter\n     *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n     *\n     *        // Skip content-length header in the frame to the broker\n     *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n     *\n     *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n     *        // setting content-type header is not mandatory, however a good practice\n     *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n     *                         headers: {'content-type': 'application/octet-stream'}});\n     * ```\n     */\n  }, {\n    key: \"publish\",\n    value: function publish(params) {\n      this._checkConnection();\n      // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n      this._stompHandler.publish(params);\n    }\n  }, {\n    key: \"_checkConnection\",\n    value: function _checkConnection() {\n      if (!this.connected) {\n        throw new TypeError('There is no underlying STOMP connection');\n      }\n    }\n    /**\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n     * The value (say receipt-id) for this header needs to be unique for each use.\n     * Typically, a sequence, a UUID, a random number or a combination may be used.\n     *\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n     * The operation needs to be matched based on the value of the receipt-id.\n     *\n     * This method allows watching for a receipt and invoking the callback\n     *  when the corresponding receipt has been received.\n     *\n     * The actual {@link IFrame} will be passed as parameter to the callback.\n     *\n     * Example:\n     * ```javascript\n     *        // Subscribing with acknowledgement\n     *        let receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *\n     *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n     *\n     *\n     *        // Publishing with acknowledgement\n     *        receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n     * ```\n     */\n  }, {\n    key: \"watchForReceipt\",\n    value: function watchForReceipt(receiptId, callback) {\n      this._checkConnection();\n      // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n      this._stompHandler.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * Subscribe to a STOMP Broker location. The callback will be invoked for each\n     * received message with the {@link IMessage} as argument.\n     *\n     * Note: The library will generate a unique ID if there is none provided in the headers.\n     *       To use your own ID, pass it using the `headers` argument.\n     *\n     * ```javascript\n     *        callback = function(message) {\n     *        // called when the client receives a STOMP message from the server\n     *          if (message.body) {\n     *            alert(\"got message with body \" + message.body)\n     *          } else {\n     *            alert(\"got empty message\");\n     *          }\n     *        });\n     *\n     *        var subscription = client.subscribe(\"/queue/test\", callback);\n     *\n     *        // Explicit subscription id\n     *        var mySubId = 'my-subscription-id-001';\n     *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n     * ```\n     */\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(destination, callback) {\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this._checkConnection();\n      // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n      return this._stompHandler.subscribe(destination, callback, headers);\n    }\n    /**\n     * It is preferable to unsubscribe from a subscription by calling\n     * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n     *\n     * ```javascript\n     *        var subscription = client.subscribe(destination, onmessage);\n     *        // ...\n     *        subscription.unsubscribe();\n     * ```\n     *\n     * See: https://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n     */\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(id) {\n      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this._checkConnection();\n      // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n      this._stompHandler.unsubscribe(id, headers);\n    }\n    /**\n     * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n     * and [abort]{@link ITransaction#abort}.\n     *\n     * `transactionId` is optional, if not passed the library will generate it internally.\n     */\n  }, {\n    key: \"begin\",\n    value: function begin(transactionId) {\n      this._checkConnection();\n      // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n      return this._stompHandler.begin(transactionId);\n    }\n    /**\n     * Commit a transaction.\n     *\n     * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.commit();\n     * ```\n     */\n  }, {\n    key: \"commit\",\n    value: function commit(transactionId) {\n      this._checkConnection();\n      // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n      this._stompHandler.commit(transactionId);\n    }\n    /**\n     * Abort a transaction.\n     * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.abort();\n     * ```\n     */\n  }, {\n    key: \"abort\",\n    value: function abort(transactionId) {\n      this._checkConnection();\n      // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n      this._stompHandler.abort(transactionId);\n    }\n    /**\n     * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // acknowledge it\n     *          message.ack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n  }, {\n    key: \"ack\",\n    value: function ack(messageId, subscriptionId) {\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this._checkConnection();\n      // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n      this._stompHandler.ack(messageId, subscriptionId, headers);\n    }\n    /**\n     * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // an error occurs, nack it\n     *          message.nack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n  }, {\n    key: \"nack\",\n    value: function nack(messageId, subscriptionId) {\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this._checkConnection();\n      // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n      this._stompHandler.nack(messageId, subscriptionId, headers);\n    }\n  }]);\n  return Client;\n}();","map":{"version":3,"names":["StompHandler","ActivationState","StompSocketState","Versions","Client","conf","arguments","length","undefined","_classCallCheck","stompVersions","default","connectionTimeout","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","splitLargeFrames","maxWebSocketChunkSize","forceBinaryWSFrames","appendMissingNULLonIncoming","discardWebsocketOnCommFailure","state","INACTIVE","noOp","debug","beforeConnect","onConnect","onDisconnect","onUnhandledMessage","onUnhandledReceipt","onUnhandledFrame","onStompError","onWebSocketClose","onWebSocketError","logRawCommunication","onChangeState","connectHeaders","_disconnectHeaders","configure","_createClass","key","get","_this$_stompHandler","_stompHandler","_webSocket","set","value","disconnectHeaders","connected","connectedVersion","ACTIVE","_changeState","Object","assign","activate","_this","_activate","active","_connect","DEACTIVATING","deactivate","then","_connect2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this2","webSocket","wrap","_callee$","_context","prev","next","abrupt","_connectionWatcher","clearTimeout","setTimeout","concat","forceDisconnect","_createWebSocket","frame","_disposeStompHandler","evt","_schedule_reconnect","message","start","stop","apply","webSocketFactory","brokerURL","WebSocket","protocolVersions","Error","binaryType","_this3","_reconnector","_deactivate","_callee2","_this4","options","force","needToDispose","retPromise","origOnWebSocketClose","_this$_stompHandler2","_args2","_callee2$","_context2","Promise","resolve","readyState","CLOSED","reject","discardWebsocket","dispose","publish","params","_checkConnection","TypeError","watchForReceipt","receiptId","callback","subscribe","destination","headers","unsubscribe","id","begin","transactionId","commit","abort","ack","messageId","subscriptionId","nack"],"sources":["C:\\Users\\paulm\\Documents\\Local Programming\\Websites\\SnowFinder\\frontend\\node_modules\\@stomp\\stompjs\\src\\client.ts"],"sourcesContent":["import { ITransaction } from './i-transaction.js';\nimport { StompConfig } from './stomp-config.js';\nimport { StompHandler } from './stomp-handler.js';\nimport { StompHeaders } from './stomp-headers.js';\nimport { StompSubscription } from './stomp-subscription.js';\nimport {\n  ActivationState,\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  IPublishParams,\n  IStompSocket,\n  messageCallbackType,\n  StompSocketState,\n  wsErrorCallbackType,\n} from './types.js';\nimport { Versions } from './versions.js';\n\n/**\n * @internal\n */\ndeclare const WebSocket: {\n  prototype: IStompSocket;\n  new (url: string, protocols?: string | string[]): IStompSocket;\n};\n\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Client {\n  /**\n   * The URL for the STOMP broker to connect to.\n   * Typically like `\"ws://broker.329broker.com:15674/ws\"` or `\"wss://broker.329broker.com:15674/ws\"`.\n   *\n   * Only one of this or [Client#webSocketFactory]{@link Client#webSocketFactory} need to be set.\n   * If both are set, [Client#webSocketFactory]{@link Client#webSocketFactory} will be used.\n   *\n   * If your environment does not support WebSockets natively, please refer to\n   * [Polyfills]{@link https://stomp-js.github.io/guide/stompjs/rx-stomp/ng2-stompjs/pollyfils-for-stompjs-v5.html}.\n   */\n  public brokerURL: string | undefined;\n\n  /**\n   * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\n   *\n   * Example:\n   * ```javascript\n   *        // Try only versions 1.1 and 1.0\n   *        client.stompVersions = new Versions(['1.1', '1.0'])\n   * ```\n   */\n  public stompVersions = Versions.default;\n\n  /**\n   * This function should return a WebSocket or a similar (e.g. SockJS) object.\n   * If your environment does not support WebSockets natively, please refer to\n   * [Polyfills]{@link https://stomp-js.github.io/guide/stompjs/rx-stomp/ng2-stompjs/pollyfils-for-stompjs-v5.html}.\n   * If your STOMP Broker supports WebSockets, prefer setting [Client#brokerURL]{@link Client#brokerURL}.\n   *\n   * If both this and [Client#brokerURL]{@link Client#brokerURL} are set, this will be used.\n   *\n   * Example:\n   * ```javascript\n   *        // use a WebSocket\n   *        client.webSocketFactory= function () {\n   *          return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n   *        };\n   *\n   *        // Typical usage with SockJS\n   *        client.webSocketFactory= function () {\n   *          return new SockJS(\"http://broker.329broker.com/stomp\");\n   *        };\n   * ```\n   */\n  public webSocketFactory: (() => IStompSocket) | undefined;\n\n  /**\n   * Will retry if Stomp connection is not established in specified milliseconds.\n   * Default 0, which switches off automatic reconnection.\n   */\n  public connectionTimeout: number = 0;\n\n  // As per https://stackoverflow.com/questions/45802988/typescript-use-correct-version-of-settimeout-node-vs-window/56239226#56239226\n  private _connectionWatcher: ReturnType<typeof setTimeout> | undefined; // Timer\n\n  /**\n   *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n   */\n  public reconnectDelay: number = 5000;\n\n  /**\n   * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n   */\n  public heartbeatIncoming: number = 10000;\n\n  /**\n   * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n   */\n  public heartbeatOutgoing: number = 10000;\n\n  /**\n   * This switches on a non-standard behavior while sending WebSocket packets.\n   * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n   * Only Java Spring brokers seem to support this mode.\n   *\n   * WebSockets, by itself, split large (text) packets,\n   * so it is not needed with a truly compliant STOMP/WebSocket broker.\n   * Setting it for such a broker will cause large messages to fail.\n   *\n   * `false` by default.\n   *\n   * Binary frames are never split.\n   */\n  public splitLargeFrames: boolean = false;\n\n  /**\n   * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n   * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n   */\n  public maxWebSocketChunkSize: number = 8 * 1024;\n\n  /**\n   * Usually the\n   * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n   * is automatically decided by type of the payload.\n   * Default is `false`, which should work with all compliant brokers.\n   *\n   * Set this flag to force binary frames.\n   */\n  public forceBinaryWSFrames: boolean = false;\n\n  /**\n   * A bug in ReactNative chops a string on occurrence of a NULL.\n   * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n   * This makes incoming WebSocket messages invalid STOMP packets.\n   * Setting this flag attempts to reverse the damage by appending a NULL.\n   * If the broker splits a large message into multiple WebSocket messages,\n   * this flag will cause data loss and abnormal termination of connection.\n   *\n   * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n   */\n  public appendMissingNULLonIncoming: boolean = false;\n\n  /**\n   * Underlying WebSocket instance, READONLY.\n   */\n  get webSocket(): IStompSocket | undefined {\n    return this._stompHandler?._webSocket;\n  }\n\n  /**\n   * Connection headers, important keys - `login`, `passcode`, `host`.\n   * Though STOMP 1.2 standard marks these keys to be present, check your broker documentation for\n   * details specific to your broker.\n   */\n  public connectHeaders: StompHeaders;\n\n  /**\n   * Disconnection headers.\n   */\n  get disconnectHeaders(): StompHeaders {\n    return this._disconnectHeaders;\n  }\n\n  set disconnectHeaders(value: StompHeaders) {\n    this._disconnectHeaders = value;\n    if (this._stompHandler) {\n      this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n    }\n  }\n  private _disconnectHeaders: StompHeaders;\n\n  /**\n   * This function will be called for any unhandled messages.\n   * It is useful for receiving messages sent to RabbitMQ temporary queues.\n   *\n   * It can also get invoked with stray messages while the server is processing\n   * a request to [Client#unsubscribe]{@link Client#unsubscribe}\n   * from an endpoint.\n   *\n   * The actual {@link IMessage} will be passed as parameter to the callback.\n   */\n  public onUnhandledMessage: messageCallbackType;\n\n  /**\n   * STOMP brokers can be requested to notify when an operation is actually completed.\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}. See\n   * [Client#watchForReceipt]{@link Client#watchForReceipt} for examples.\n   *\n   * The actual {@link IFrame} will be passed as parameter to the callback.\n   */\n  public onUnhandledReceipt: frameCallbackType;\n\n  /**\n   * Will be invoked if {@link IFrame} of an unknown type is received from the STOMP broker.\n   *\n   * The actual {@link IFrame} will be passed as parameter to the callback.\n   */\n  public onUnhandledFrame: frameCallbackType;\n\n  /**\n   * `true` if there is an active connection to STOMP Broker\n   */\n  get connected(): boolean {\n    return !!this._stompHandler && this._stompHandler.connected;\n  }\n\n  /**\n   * Callback, invoked on before a connection to the STOMP broker.\n   *\n   * You can change options on the client, which will impact the immediate connecting.\n   * It is valid to call [Client#decativate]{@link Client#deactivate} in this callback.\n   *\n   * As of version 5.1, this callback can be\n   * [async](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n   * (i.e., it can return a\n   * [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)).\n   * In that case, connect will be called only after the Promise is resolved.\n   * This can be used to reliably fetch credentials, access token etc. from some other service\n   * in an asynchronous way.\n   */\n  public beforeConnect: () => void | Promise<void>;\n\n  /**\n   * Callback, invoked on every successful connection to the STOMP broker.\n   *\n   * The actual {@link IFrame} will be passed as parameter to the callback.\n   * Sometimes clients will like to use headers from this frame.\n   */\n  public onConnect: frameCallbackType;\n\n  /**\n   * Callback, invoked on every successful disconnection from the STOMP broker. It will not be invoked if\n   * the STOMP broker disconnected due to an error.\n   *\n   * The actual Receipt {@link IFrame} acknowledging the DISCONNECT will be passed as parameter to the callback.\n   *\n   * The way STOMP protocol is designed, the connection may close/terminate without the client\n   * receiving the Receipt {@link IFrame} acknowledging the DISCONNECT.\n   * You might find [Client#onWebSocketClose]{@link Client#onWebSocketClose} more appropriate to watch\n   * STOMP broker disconnects.\n   */\n  public onDisconnect: frameCallbackType;\n\n  /**\n   * Callback, invoked on an ERROR frame received from the STOMP Broker.\n   * A compliant STOMP Broker will close the connection after this type of frame.\n   * Please check broker specific documentation for exact behavior.\n   *\n   * The actual {@link IFrame} will be passed as parameter to the callback.\n   */\n  public onStompError: frameCallbackType;\n\n  /**\n   * Callback, invoked when underlying WebSocket is closed.\n   *\n   * Actual [CloseEvent]{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n   * is passed as parameter to the callback.\n   */\n  public onWebSocketClose: closeEventCallbackType;\n\n  /**\n   * Callback, invoked when underlying WebSocket raises an error.\n   *\n   * Actual [Event]{@link https://developer.mozilla.org/en-US/docs/Web/API/Event}\n   * is passed as parameter to the callback.\n   */\n  public onWebSocketError: wsErrorCallbackType;\n\n  /**\n   * Set it to log the actual raw communication with the broker.\n   * When unset, it logs headers of the parsed frames.\n   *\n   * Changes effect from the next broker reconnect.\n   *\n   * **Caution: this assumes that frames only have valid UTF8 strings.**\n   */\n  public logRawCommunication: boolean;\n\n  /**\n   * By default, debug messages are discarded. To log to `console` following can be used:\n   *\n   * ```javascript\n   *        client.debug = function(str) {\n   *          console.log(str);\n   *        };\n   * ```\n   *\n   * Currently this method does not support levels of log. Be aware that the\n   * output can be quite verbose\n   * and may contain sensitive information (like passwords, tokens etc.).\n   */\n  public debug: debugFnType;\n\n  /**\n   * Browsers do not immediately close WebSockets when `.close` is issued.\n   * This may cause reconnection to take a significantly long time in case\n   *  of some types of failures.\n   * In case of incoming heartbeat failure, this experimental flag instructs\n   * the library to discard the socket immediately\n   * (even before it is actually closed).\n   */\n  public discardWebsocketOnCommFailure: boolean = false;\n\n  /**\n   * version of STOMP protocol negotiated with the server, READONLY\n   */\n  get connectedVersion(): string | undefined {\n    return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n  }\n\n  private _stompHandler: StompHandler | undefined;\n\n  /**\n   * if the client is active (connected or going to reconnect)\n   */\n  get active(): boolean {\n    return this.state === ActivationState.ACTIVE;\n  }\n\n  /**\n   * It will be called on state change.\n   *\n   * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\n   */\n  public onChangeState: (state: ActivationState) => void;\n\n  private _changeState(state: ActivationState) {\n    this.state = state;\n    this.onChangeState(state);\n  }\n\n  /**\n   * Activation state.\n   *\n   * It will usually be ACTIVE or INACTIVE.\n   * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\n   */\n  public state: ActivationState = ActivationState.INACTIVE;\n\n  private _reconnector: any;\n\n  /**\n   * Create an instance.\n   */\n  constructor(conf: StompConfig = {}) {\n    // No op callbacks\n    const noOp = () => {};\n    this.debug = noOp;\n    this.beforeConnect = noOp;\n    this.onConnect = noOp;\n    this.onDisconnect = noOp;\n    this.onUnhandledMessage = noOp;\n    this.onUnhandledReceipt = noOp;\n    this.onUnhandledFrame = noOp;\n    this.onStompError = noOp;\n    this.onWebSocketClose = noOp;\n    this.onWebSocketError = noOp;\n    this.logRawCommunication = false;\n    this.onChangeState = noOp;\n\n    // These parameters would typically get proper values before connect is called\n    this.connectHeaders = {};\n    this._disconnectHeaders = {};\n\n    // Apply configuration\n    this.configure(conf);\n  }\n\n  /**\n   * Update configuration.\n   */\n  public configure(conf: StompConfig): void {\n    // bulk assign all properties to this\n    (Object as any).assign(this, conf);\n  }\n\n  /**\n   * Initiate the connection with the broker.\n   * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n   * it will keep trying to reconnect.\n   *\n   * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n   */\n  public activate(): void {\n    const _activate = () => {\n      if (this.active) {\n        this.debug('Already ACTIVE, ignoring request to activate');\n        return;\n      }\n\n      this._changeState(ActivationState.ACTIVE);\n\n      this._connect();\n    };\n\n    // if it is deactivating, wait for it to complete before activating.\n    if (this.state === ActivationState.DEACTIVATING) {\n      this.debug('Waiting for deactivation to finish before activating');\n      this.deactivate().then(() => {\n        _activate();\n      });\n    } else {\n      _activate();\n    }\n  }\n\n  private async _connect(): Promise<void> {\n    await this.beforeConnect();\n\n    if (this._stompHandler) {\n      this.debug('There is already a stompHandler, skipping the call to connect');\n      return;\n    }\n\n    if (!this.active) {\n      this.debug(\n        'Client has been marked inactive, will not attempt to connect'\n      );\n      return;\n    }\n\n    // setup connection watcher\n    if (this.connectionTimeout > 0) {\n      // clear first\n      if (this._connectionWatcher) {\n        clearTimeout(this._connectionWatcher);\n      }\n      this._connectionWatcher = setTimeout(() => {\n        if (this.connected) {\n          return;\n        }\n        // Connection not established, close the underlying socket\n        // a reconnection will be attempted\n        this.debug(\n          `Connection not established in ${this.connectionTimeout}ms, closing socket`\n        );\n        this.forceDisconnect();\n      }, this.connectionTimeout);\n    }\n\n    this.debug('Opening Web Socket...');\n\n    // Get the actual WebSocket (or a similar object)\n    const webSocket = this._createWebSocket();\n\n    this._stompHandler = new StompHandler(this, webSocket, {\n      debug: this.debug,\n      stompVersions: this.stompVersions,\n      connectHeaders: this.connectHeaders,\n      disconnectHeaders: this._disconnectHeaders,\n      heartbeatIncoming: this.heartbeatIncoming,\n      heartbeatOutgoing: this.heartbeatOutgoing,\n      splitLargeFrames: this.splitLargeFrames,\n      maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n      forceBinaryWSFrames: this.forceBinaryWSFrames,\n      logRawCommunication: this.logRawCommunication,\n      appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n      discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n\n      onConnect: frame => {\n        // Successfully connected, stop the connection watcher\n        if (this._connectionWatcher) {\n          clearTimeout(this._connectionWatcher);\n          this._connectionWatcher = undefined;\n        }\n\n        if (!this.active) {\n          this.debug(\n            'STOMP got connected while deactivate was issued, will disconnect now'\n          );\n          this._disposeStompHandler();\n          return;\n        }\n        this.onConnect(frame);\n      },\n      onDisconnect: frame => {\n        this.onDisconnect(frame);\n      },\n      onStompError: frame => {\n        this.onStompError(frame);\n      },\n      onWebSocketClose: evt => {\n        this._stompHandler = undefined; // a new one will be created in case of a reconnect\n\n        if (this.state === ActivationState.DEACTIVATING) {\n          // Mark deactivation complete\n          this._changeState(ActivationState.INACTIVE);\n        }\n\n        // The callback is called before attempting to reconnect, this would allow the client\n        // to be `deactivated` in the callback.\n        this.onWebSocketClose(evt);\n\n        if (this.active) {\n          this._schedule_reconnect();\n        }\n      },\n      onWebSocketError: evt => {\n        this.onWebSocketError(evt);\n      },\n      onUnhandledMessage: message => {\n        this.onUnhandledMessage(message);\n      },\n      onUnhandledReceipt: frame => {\n        this.onUnhandledReceipt(frame);\n      },\n      onUnhandledFrame: frame => {\n        this.onUnhandledFrame(frame);\n      },\n    });\n\n    this._stompHandler.start();\n  }\n\n  private _createWebSocket(): IStompSocket {\n    let webSocket: IStompSocket;\n\n    if (this.webSocketFactory) {\n      webSocket = this.webSocketFactory();\n    } else if (this.brokerURL) {\n      webSocket = new WebSocket(\n        this.brokerURL,\n        this.stompVersions.protocolVersions()\n      );\n    } else {\n      throw new Error('Either brokerURL or webSocketFactory must be provided');\n    }\n    webSocket.binaryType = 'arraybuffer';\n    return webSocket;\n  }\n\n  private _schedule_reconnect(): void {\n    if (this.reconnectDelay > 0) {\n      this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n\n      this._reconnector = setTimeout(() => {\n        this._connect();\n      }, this.reconnectDelay);\n    }\n  }\n\n  /**\n   * Disconnect if connected and stop auto reconnect loop.\n   * Appropriate callbacks will be invoked if there is an underlying STOMP connection.\n   *\n   * This call is async. It will resolve immediately if there is no underlying active websocket,\n   * otherwise, it will resolve after the underlying websocket is properly disposed of.\n   *\n   * It is not an error to invoke this method more than once.\n   * Each of those would resolve on completion of deactivation.\n   *\n   * To reactivate, you can call [Client#activate]{@link Client#activate}.\n   *\n   * Experimental: pass `force: true` to immediately discard the underlying connection.\n   * This mode will skip both the STOMP and the Websocket shutdown sequences.\n   * In some cases, browsers take a long time in the Websocket shutdown\n   * if the underlying connection had gone stale.\n   * Using this mode can speed up.\n   * When this mode is used, the actual Websocket may linger for a while\n   * and the broker may not realize that the connection is no longer in use.\n   *\n   * It is possible to invoke this method initially without the `force` option\n   * and subsequently, say after a wait, with the `force` option.\n   */\n  public async deactivate(options: { force?: boolean } = {}): Promise<void> {\n    const force: boolean = options.force || false;\n    const needToDispose = this.active;\n    let retPromise: Promise<void>;\n\n    if (this.state === ActivationState.INACTIVE) {\n      this.debug(`Already INACTIVE, nothing more to do`);\n      return Promise.resolve();\n    }\n\n    this._changeState(ActivationState.DEACTIVATING);\n\n    // Clear if a reconnection was scheduled\n    if (this._reconnector) {\n      clearTimeout(this._reconnector);\n      this._reconnector = undefined;\n    }\n\n    if (\n      this._stompHandler &&\n      // @ts-ignore - if there is a _stompHandler, there is the webSocket\n      this.webSocket.readyState !== StompSocketState.CLOSED\n    ) {\n      const origOnWebSocketClose = this._stompHandler.onWebSocketClose;\n      // we need to wait for the underlying websocket to close\n      retPromise = new Promise<void>((resolve, reject) => {\n        // @ts-ignore - there is a _stompHandler\n        this._stompHandler.onWebSocketClose = evt => {\n          origOnWebSocketClose(evt);\n          resolve();\n        };\n      });\n    } else {\n      // indicate that auto reconnect loop should terminate\n      this._changeState(ActivationState.INACTIVE);\n      return Promise.resolve();\n    }\n\n    if (force) {\n      this._stompHandler?.discardWebsocket();\n    } else if (needToDispose) {\n      this._disposeStompHandler();\n    }\n\n    return retPromise;\n  }\n\n  /**\n   * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n   * This is different from a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n   * After forcing disconnect, automatic reconnect will be attempted.\n   * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n   */\n  public forceDisconnect() {\n    if (this._stompHandler) {\n      this._stompHandler.forceDisconnect();\n    }\n  }\n\n  private _disposeStompHandler() {\n    // Dispose STOMP Handler\n    if (this._stompHandler) {\n      this._stompHandler.dispose();\n    }\n  }\n\n  /**\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations.\n   *\n   * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\n   *\n   * `body` must be String.\n   * You will need to covert the payload to string in case it is not string (e.g. JSON).\n   *\n   * To send a binary message body, use `binaryBody` parameter. It should be a\n   * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n   * Sometimes brokers may not support binary frames out of the box.\n   * Please check your broker documentation.\n   *\n   * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n   * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n   * For binary messages, `content-length` header is always added.\n   *\n   * Caution: The broker will, most likely, report an error and disconnect\n   * if the message body has NULL octet(s) and `content-length` header is missing.\n   *\n   * ```javascript\n   *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n   *\n   *        // Only destination is mandatory parameter\n   *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n   *\n   *        // Skip content-length header in the frame to the broker\n   *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n   *\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n   *        // setting content-type header is not mandatory, however a good practice\n   *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n   *                         headers: {'content-type': 'application/octet-stream'}});\n   * ```\n   */\n  public publish(params: IPublishParams) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.publish(params);\n  }\n\n  private _checkConnection() {\n    if (!this.connected) {\n      throw new TypeError('There is no underlying STOMP connection');\n    }\n  }\n\n  /**\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n   * The value (say receipt-id) for this header needs to be unique for each use.\n   * Typically, a sequence, a UUID, a random number or a combination may be used.\n   *\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n   * The operation needs to be matched based on the value of the receipt-id.\n   *\n   * This method allows watching for a receipt and invoking the callback\n   *  when the corresponding receipt has been received.\n   *\n   * The actual {@link IFrame} will be passed as parameter to the callback.\n   *\n   * Example:\n   * ```javascript\n   *        // Subscribing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        client.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *\n   *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n   *\n   *\n   *        // Publishing with acknowledgement\n   *        receiptId = randomText();\n   *\n   *        client.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n   * ```\n   */\n  public watchForReceipt(receiptId: string, callback: frameCallbackType): void {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.watchForReceipt(receiptId, callback);\n  }\n\n  /**\n   * Subscribe to a STOMP Broker location. The callback will be invoked for each\n   * received message with the {@link IMessage} as argument.\n   *\n   * Note: The library will generate a unique ID if there is none provided in the headers.\n   *       To use your own ID, pass it using the `headers` argument.\n   *\n   * ```javascript\n   *        callback = function(message) {\n   *        // called when the client receives a STOMP message from the server\n   *          if (message.body) {\n   *            alert(\"got message with body \" + message.body)\n   *          } else {\n   *            alert(\"got empty message\");\n   *          }\n   *        });\n   *\n   *        var subscription = client.subscribe(\"/queue/test\", callback);\n   *\n   *        // Explicit subscription id\n   *        var mySubId = 'my-subscription-id-001';\n   *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n   * ```\n   */\n  public subscribe(\n    destination: string,\n    callback: messageCallbackType,\n    headers: StompHeaders = {}\n  ): StompSubscription {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    return this._stompHandler.subscribe(destination, callback, headers);\n  }\n\n  /**\n   * It is preferable to unsubscribe from a subscription by calling\n   * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n   *\n   * ```javascript\n   *        var subscription = client.subscribe(destination, onmessage);\n   *        // ...\n   *        subscription.unsubscribe();\n   * ```\n   *\n   * See: https://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n   */\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.unsubscribe(id, headers);\n  }\n\n  /**\n   * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n   * and [abort]{@link ITransaction#abort}.\n   *\n   * `transactionId` is optional, if not passed the library will generate it internally.\n   */\n  public begin(transactionId?: string): ITransaction {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    return this._stompHandler.begin(transactionId);\n  }\n\n  /**\n   * Commit a transaction.\n   *\n   * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.commit();\n   * ```\n   */\n  public commit(transactionId: string): void {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.commit(transactionId);\n  }\n\n  /**\n   * Abort a transaction.\n   * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.abort();\n   * ```\n   */\n  public abort(transactionId: string): void {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.abort(transactionId);\n  }\n\n  /**\n   * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n   * on the {@link IMessage} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // acknowledge it\n   *          message.ack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   */\n  public ack(\n    messageId: string,\n    subscriptionId: string,\n    headers: StompHeaders = {}\n  ): void {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.ack(messageId, subscriptionId, headers);\n  }\n\n  /**\n   * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n   * on the {@link IMessage} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // an error occurs, nack it\n   *          message.nack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   */\n  public nack(\n    messageId: string,\n    subscriptionId: string,\n    headers: StompHeaders = {}\n  ): void {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.nack(messageId, subscriptionId, headers);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}