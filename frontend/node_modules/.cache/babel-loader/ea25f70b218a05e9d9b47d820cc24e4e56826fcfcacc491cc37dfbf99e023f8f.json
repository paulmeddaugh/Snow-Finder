{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Client } from \"@stomp/stompjs\";\nlet stompClient;\nexport default function useStomp(connectionUrl) {\n  _s();\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    connectionUrl = 'ws://localhost:8080/find-snow';\n    stompClient = new Client({\n      brokerURL: connectionUrl\n    });\n    stompClient.onConnect = () => {\n      stompClient.subscribe('/results/snow', function (greeting) {\n        setMessage(JSON.parse(greeting.body).name);\n      });\n    };\n    stompClient.onStompError = function (frame) {\n      // Will be invoked in case of error encountered at Broker\n      // Bad login/passcode typically will cause an error\n      // Complaint brokers will set `message` header with a brief message. Body may contain details.\n      // Compliant brokers will terminate the connection after any error\n      console.log('Broker reported error: ' + frame.headers['message']);\n      console.log('Additional details: ' + frame.body);\n    };\n  }, [connectionUrl]);\n  const send = () => {\n    // stompClient.send(\"/find/snow\", {}, JSON.stringify(new FindObject('zip', 74467, 50)));\n  };\n  return {\n    message,\n    send\n  };\n}\n_s(useStomp, \"3v4ozrfWvlmZ97O5zgyhgDZKC+M=\");","map":{"version":3,"names":["useEffect","useState","Client","stompClient","useStomp","connectionUrl","_s","message","setMessage","brokerURL","onConnect","subscribe","greeting","JSON","parse","body","name","onStompError","frame","console","log","headers","send"],"sources":["C:/Users/paulm/Documents/Local Programming/Websites/SnowFinder/frontend/src/hooks/useStomp.ts"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport SockJS from 'sockjs-client';\r\nimport { CompatClient, Stomp, Client } from \"@stomp/stompjs\";\r\nimport FindObject from \"../classes/FindObject\";\r\n\r\nlet stompClient: Client;\r\n\r\nexport default function useStomp(connectionUrl: string) {\r\n    const [message, setMessage] = useState('');\r\n\r\n    useEffect(() => {\r\n        connectionUrl = 'ws://localhost:8080/find-snow';\r\n        stompClient = new Client({ brokerURL: connectionUrl });\r\n        stompClient.onConnect = () => {\r\n            stompClient.subscribe('/results/snow', function (greeting) {\r\n                setMessage(JSON.parse(greeting.body).name);\r\n            });\r\n        };\r\n        stompClient.onStompError = function (frame) {\r\n            // Will be invoked in case of error encountered at Broker\r\n            // Bad login/passcode typically will cause an error\r\n            // Complaint brokers will set `message` header with a brief message. Body may contain details.\r\n            // Compliant brokers will terminate the connection after any error\r\n            console.log('Broker reported error: ' + frame.headers['message']);\r\n            console.log('Additional details: ' + frame.body);\r\n          };\r\n    }, [connectionUrl]);\r\n\r\n    const send = () => {\r\n        // stompClient.send(\"/find/snow\", {}, JSON.stringify(new FindObject('zip', 74467, 50)));\r\n    };\r\n\r\n    return {\r\n        message,\r\n        send\r\n    }\r\n}"],"mappings":";AAAA,SAASA,SAAS,EAAUC,QAAQ,QAAQ,OAAO;AAEnD,SAA8BC,MAAM,QAAQ,gBAAgB;AAG5D,IAAIC,WAAmB;AAEvB,eAAe,SAASC,QAAQA,CAACC,aAAqB,EAAE;EAAAC,EAAA;EACpD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACZK,aAAa,GAAG,+BAA+B;IAC/CF,WAAW,GAAG,IAAID,MAAM,CAAC;MAAEO,SAAS,EAAEJ;IAAc,CAAC,CAAC;IACtDF,WAAW,CAACO,SAAS,GAAG,MAAM;MAC1BP,WAAW,CAACQ,SAAS,CAAC,eAAe,EAAE,UAAUC,QAAQ,EAAE;QACvDJ,UAAU,CAACK,IAAI,CAACC,KAAK,CAACF,QAAQ,CAACG,IAAI,CAAC,CAACC,IAAI,CAAC;MAC9C,CAAC,CAAC;IACN,CAAC;IACDb,WAAW,CAACc,YAAY,GAAG,UAAUC,KAAK,EAAE;MACxC;MACA;MACA;MACA;MACAC,OAAO,CAACC,GAAG,CAAC,yBAAyB,GAAGF,KAAK,CAACG,OAAO,CAAC,SAAS,CAAC,CAAC;MACjEF,OAAO,CAACC,GAAG,CAAC,sBAAsB,GAAGF,KAAK,CAACH,IAAI,CAAC;IAClD,CAAC;EACP,CAAC,EAAE,CAACV,aAAa,CAAC,CAAC;EAEnB,MAAMiB,IAAI,GAAGA,CAAA,KAAM;IACf;EAAA,CACH;EAED,OAAO;IACHf,OAAO;IACPe;EACJ,CAAC;AACL;AAAChB,EAAA,CA7BuBF,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}