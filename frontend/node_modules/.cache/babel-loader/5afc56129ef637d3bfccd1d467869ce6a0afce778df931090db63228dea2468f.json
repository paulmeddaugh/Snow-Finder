{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Client } from \"@stomp/stompjs\";\nimport FindObject from \"../classes/FindObject\";\n\n// let stompClient: CompatClient;\nlet stompClient;\nexport default function useStomp(connectionUrl) {\n  _s();\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    // connectionUrl = '/find-snow';\n    // const socket = new SockJS(connectionUrl);\n    // stompClient = Stomp.over(() => socket);\n    stompClient = new Client({\n      brokerURL: connectionUrl,\n      reconnectDelay: 5000,\n      heartbeatIncoming: 4000,\n      heartbeatOutgoing: 4000\n    });\n    stompClient.onConnect = () => {\n      console.log(\"Connected!!\");\n      stompClient.subscribe('/results/snow', function (greeting) {\n        const result = String(JSON.parse(greeting.body));\n        setMessage(result);\n      });\n    };\n    stompClient.onStompError = function (frame) {\n      // Will be invoked in case of error encountered at Broker\n      // Bad login/passcode typically will cause an error\n      // Complaint brokers will set `message` header with a brief message. Body may contain details.\n      // Compliant brokers will terminate the connection after any error\n      console.log('Broker reported error: ' + frame.headers['message']);\n      console.log('Additional details: ' + frame.body);\n    };\n    stompClient.activate();\n  }, [connectionUrl]);\n  const send = () => {\n    stompClient.publish({\n      destination: \"/find/snowInUS\",\n      body: JSON.stringify(new FindObject('zip', 74467, 50)),\n      skipContentLengthHeader: true\n    });\n  };\n  return {\n    message,\n    send\n  };\n}\n_s(useStomp, \"3v4ozrfWvlmZ97O5zgyhgDZKC+M=\");","map":{"version":3,"names":["useEffect","useState","Client","FindObject","stompClient","useStomp","connectionUrl","_s","message","setMessage","brokerURL","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","console","log","subscribe","greeting","result","String","JSON","parse","body","onStompError","frame","headers","activate","send","publish","destination","stringify","skipContentLengthHeader"],"sources":["C:/Users/paulm/Documents/Local Programming/Websites/SnowFinder/frontend/src/hooks/useStomp.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport SockJS from 'sockjs-client';\r\nimport { Stomp, CompatClient, Client } from \"@stomp/stompjs\";\r\nimport FindObject from \"../classes/FindObject\";\r\n\r\n// let stompClient: CompatClient;\r\nlet stompClient: Client;\r\n\r\nexport default function useStomp(connectionUrl: string) {\r\n    const [message, setMessage] = useState('');\r\n\r\n    useEffect(() => {\r\n        // connectionUrl = '/find-snow';\r\n        // const socket = new SockJS(connectionUrl);\r\n        // stompClient = Stomp.over(() => socket);\r\n        stompClient = new Client({ \r\n            brokerURL: connectionUrl,\r\n            reconnectDelay: 5000,\r\n            heartbeatIncoming: 4000,\r\n            heartbeatOutgoing: 4000,\r\n        });\r\n        stompClient.onConnect = () => {\r\n            console.log(\"Connected!!\");\r\n            stompClient.subscribe('/results/snow', function (greeting) {\r\n                const result = String(JSON.parse(greeting.body));\r\n                setMessage(result);\r\n            });\r\n        };\r\n        stompClient.onStompError = function (frame) {\r\n            // Will be invoked in case of error encountered at Broker\r\n            // Bad login/passcode typically will cause an error\r\n            // Complaint brokers will set `message` header with a brief message. Body may contain details.\r\n            // Compliant brokers will terminate the connection after any error\r\n            console.log('Broker reported error: ' + frame.headers['message']);\r\n            console.log('Additional details: ' + frame.body);\r\n        };\r\n        stompClient.activate();\r\n    }, [connectionUrl]);\r\n\r\n    const send = () => {\r\n        stompClient.publish({ \r\n            destination: \"/find/snowInUS\", \r\n            body: JSON.stringify(new FindObject('zip', 74467, 50)),\r\n            skipContentLengthHeader: true\r\n        });\r\n    };\r\n\r\n    return {\r\n        message,\r\n        send\r\n    }\r\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAA8BC,MAAM,QAAQ,gBAAgB;AAC5D,OAAOC,UAAU,MAAM,uBAAuB;;AAE9C;AACA,IAAIC,WAAmB;AAEvB,eAAe,SAASC,QAAQA,CAACC,aAAqB,EAAE;EAAAC,EAAA;EACpD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACZ;IACA;IACA;IACAI,WAAW,GAAG,IAAIF,MAAM,CAAC;MACrBQ,SAAS,EAAEJ,aAAa;MACxBK,cAAc,EAAE,IAAI;MACpBC,iBAAiB,EAAE,IAAI;MACvBC,iBAAiB,EAAE;IACvB,CAAC,CAAC;IACFT,WAAW,CAACU,SAAS,GAAG,MAAM;MAC1BC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC1BZ,WAAW,CAACa,SAAS,CAAC,eAAe,EAAE,UAAUC,QAAQ,EAAE;QACvD,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAChDd,UAAU,CAACU,MAAM,CAAC;MACtB,CAAC,CAAC;IACN,CAAC;IACDf,WAAW,CAACoB,YAAY,GAAG,UAAUC,KAAK,EAAE;MACxC;MACA;MACA;MACA;MACAV,OAAO,CAACC,GAAG,CAAC,yBAAyB,GAAGS,KAAK,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;MACjEX,OAAO,CAACC,GAAG,CAAC,sBAAsB,GAAGS,KAAK,CAACF,IAAI,CAAC;IACpD,CAAC;IACDnB,WAAW,CAACuB,QAAQ,EAAE;EAC1B,CAAC,EAAE,CAACrB,aAAa,CAAC,CAAC;EAEnB,MAAMsB,IAAI,GAAGA,CAAA,KAAM;IACfxB,WAAW,CAACyB,OAAO,CAAC;MAChBC,WAAW,EAAE,gBAAgB;MAC7BP,IAAI,EAAEF,IAAI,CAACU,SAAS,CAAC,IAAI5B,UAAU,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;MACtD6B,uBAAuB,EAAE;IAC7B,CAAC,CAAC;EACN,CAAC;EAED,OAAO;IACHxB,OAAO;IACPoB;EACJ,CAAC;AACL;AAACrB,EAAA,CA3CuBF,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}