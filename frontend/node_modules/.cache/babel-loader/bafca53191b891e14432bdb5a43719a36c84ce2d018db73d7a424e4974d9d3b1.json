{"ast":null,"code":"import _slicedToArray from \"C:/Users/paulm/Documents/Local Programming/Websites/SnowFinder/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/paulm/Documents/Local Programming/Websites/SnowFinder/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/paulm/Documents/Local Programming/Websites/SnowFinder/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { BYTE } from './byte.js';\nimport { FrameImpl } from './frame-impl.js';\nimport { Parser } from './parser.js';\nimport { StompSocketState } from './types.js';\nimport { Versions } from './versions.js';\nimport { augmentWebsocket } from './augment-websocket.js';\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport var StompHandler = /*#__PURE__*/function () {\n  function StompHandler(_client, _webSocket, config) {\n    var _this = this;\n    _classCallCheck(this, StompHandler);\n    this._client = _client;\n    this._webSocket = _webSocket;\n    this._connected = false;\n    this._serverFrameHandlers = {\n      // [CONNECTED Frame](https://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n      CONNECTED: function CONNECTED(frame) {\n        _this.debug(\"connected to server \".concat(frame.headers.server));\n        _this._connected = true;\n        _this._connectedVersion = frame.headers.version;\n        // STOMP version 1.2 needs header values to be escaped\n        if (_this._connectedVersion === Versions.V1_2) {\n          _this._escapeHeaderValues = true;\n        }\n        _this._setupHeartbeat(frame.headers);\n        _this.onConnect(frame);\n      },\n      // [MESSAGE Frame](https://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n      MESSAGE: function MESSAGE(frame) {\n        // the callback is registered when the client calls\n        // `subscribe()`.\n        // If there is no registered subscription for the received message,\n        // the default `onUnhandledMessage` callback is used that the client can set.\n        // This is useful for subscriptions that are automatically created\n        // on the browser side (e.g. [RabbitMQ's temporary\n        // queues](https://www.rabbitmq.com/stomp.html)).\n        var subscription = frame.headers.subscription;\n        var onReceive = _this._subscriptions[subscription] || _this.onUnhandledMessage;\n        // bless the frame to be a Message\n        var message = frame;\n        var client = _this;\n        var messageId = _this._connectedVersion === Versions.V1_2 ? message.headers.ack : message.headers['message-id'];\n        // add `ack()` and `nack()` methods directly to the returned frame\n        // so that a simple call to `message.ack()` can acknowledge the message.\n        message.ack = function () {\n          var headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          return client.ack(messageId, subscription, headers);\n        };\n        message.nack = function () {\n          var headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          return client.nack(messageId, subscription, headers);\n        };\n        onReceive(message);\n      },\n      // [RECEIPT Frame](https://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n      RECEIPT: function RECEIPT(frame) {\n        var callback = _this._receiptWatchers[frame.headers['receipt-id']];\n        if (callback) {\n          callback(frame);\n          // Server will acknowledge only once, remove the callback\n          delete _this._receiptWatchers[frame.headers['receipt-id']];\n        } else {\n          _this.onUnhandledReceipt(frame);\n        }\n      },\n      // [ERROR Frame](https://stomp.github.com/stomp-specification-1.2.html#ERROR)\n      ERROR: function ERROR(frame) {\n        _this.onStompError(frame);\n      }\n    };\n    // used to index subscribers\n    this._counter = 0;\n    // subscription callbacks indexed by subscriber's ID\n    this._subscriptions = {};\n    // receipt-watchers indexed by receipts-ids\n    this._receiptWatchers = {};\n    this._partialData = '';\n    this._escapeHeaderValues = false;\n    this._lastServerActivityTS = Date.now();\n    this.debug = config.debug;\n    this.stompVersions = config.stompVersions;\n    this.connectHeaders = config.connectHeaders;\n    this.disconnectHeaders = config.disconnectHeaders;\n    this.heartbeatIncoming = config.heartbeatIncoming;\n    this.heartbeatOutgoing = config.heartbeatOutgoing;\n    this.splitLargeFrames = config.splitLargeFrames;\n    this.maxWebSocketChunkSize = config.maxWebSocketChunkSize;\n    this.forceBinaryWSFrames = config.forceBinaryWSFrames;\n    this.logRawCommunication = config.logRawCommunication;\n    this.appendMissingNULLonIncoming = config.appendMissingNULLonIncoming;\n    this.discardWebsocketOnCommFailure = config.discardWebsocketOnCommFailure;\n    this.onConnect = config.onConnect;\n    this.onDisconnect = config.onDisconnect;\n    this.onStompError = config.onStompError;\n    this.onWebSocketClose = config.onWebSocketClose;\n    this.onWebSocketError = config.onWebSocketError;\n    this.onUnhandledMessage = config.onUnhandledMessage;\n    this.onUnhandledReceipt = config.onUnhandledReceipt;\n    this.onUnhandledFrame = config.onUnhandledFrame;\n  }\n  _createClass(StompHandler, [{\n    key: \"connectedVersion\",\n    get: function get() {\n      return this._connectedVersion;\n    }\n  }, {\n    key: \"connected\",\n    get: function get() {\n      return this._connected;\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this2 = this;\n      var parser = new Parser(\n      // On Frame\n      function (rawFrame) {\n        var frame = FrameImpl.fromRawFrame(rawFrame, _this2._escapeHeaderValues);\n        // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n        if (!_this2.logRawCommunication) {\n          _this2.debug(\"<<< \".concat(frame));\n        }\n        var serverFrameHandler = _this2._serverFrameHandlers[frame.command] || _this2.onUnhandledFrame;\n        serverFrameHandler(frame);\n      },\n      // On Incoming Ping\n      function () {\n        _this2.debug('<<< PONG');\n      });\n      this._webSocket.onmessage = function (evt) {\n        _this2.debug('Received data');\n        _this2._lastServerActivityTS = Date.now();\n        if (_this2.logRawCommunication) {\n          var rawChunkAsString = evt.data instanceof ArrayBuffer ? new TextDecoder().decode(evt.data) : evt.data;\n          _this2.debug(\"<<< \".concat(rawChunkAsString));\n        }\n        parser.parseChunk(evt.data, _this2.appendMissingNULLonIncoming);\n      };\n      this._webSocket.onclose = function (closeEvent) {\n        _this2.debug(\"Connection closed to \".concat(_this2._webSocket.url));\n        _this2._cleanUp();\n        _this2.onWebSocketClose(closeEvent);\n      };\n      this._webSocket.onerror = function (errorEvent) {\n        _this2.onWebSocketError(errorEvent);\n      };\n      this._webSocket.onopen = function () {\n        // Clone before updating\n        var connectHeaders = Object.assign({}, _this2.connectHeaders);\n        _this2.debug('Web Socket Opened...');\n        connectHeaders['accept-version'] = _this2.stompVersions.supportedVersions();\n        connectHeaders['heart-beat'] = [_this2.heartbeatOutgoing, _this2.heartbeatIncoming].join(',');\n        _this2._transmit({\n          command: 'CONNECT',\n          headers: connectHeaders\n        });\n      };\n    }\n  }, {\n    key: \"_setupHeartbeat\",\n    value: function _setupHeartbeat(headers) {\n      var _this3 = this;\n      if (headers.version !== Versions.V1_1 && headers.version !== Versions.V1_2) {\n        return;\n      }\n      // It is valid for the server to not send this header\n      // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n      if (!headers['heart-beat']) {\n        return;\n      }\n      // heart-beat header received from the server looks like:\n      //\n      //     heart-beat: sx, sy\n      var _headers$heartBeat$s = headers['heart-beat'].split(',').map(function (v) {\n          return parseInt(v, 10);\n        }),\n        _headers$heartBeat$s2 = _slicedToArray(_headers$heartBeat$s, 2),\n        serverOutgoing = _headers$heartBeat$s2[0],\n        serverIncoming = _headers$heartBeat$s2[1];\n      if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n        var ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n        this.debug(\"send PING every \".concat(ttl, \"ms\"));\n        this._pinger = setInterval(function () {\n          if (_this3._webSocket.readyState === StompSocketState.OPEN) {\n            _this3._webSocket.send(BYTE.LF);\n            _this3.debug('>>> PING');\n          }\n        }, ttl);\n      }\n      if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n        var _ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n        this.debug(\"check PONG every \".concat(_ttl, \"ms\"));\n        this._ponger = setInterval(function () {\n          var delta = Date.now() - _this3._lastServerActivityTS;\n          // We wait twice the TTL to be flexible on window's setInterval calls\n          if (delta > _ttl * 2) {\n            _this3.debug(\"did not receive server activity for the last \".concat(delta, \"ms\"));\n            _this3._closeOrDiscardWebsocket();\n          }\n        }, _ttl);\n      }\n    }\n  }, {\n    key: \"_closeOrDiscardWebsocket\",\n    value: function _closeOrDiscardWebsocket() {\n      if (this.discardWebsocketOnCommFailure) {\n        this.debug('Discarding websocket, the underlying socket may linger for a while');\n        this.discardWebsocket();\n      } else {\n        this.debug('Issuing close on the websocket');\n        this._closeWebsocket();\n      }\n    }\n  }, {\n    key: \"forceDisconnect\",\n    value: function forceDisconnect() {\n      if (this._webSocket) {\n        if (this._webSocket.readyState === StompSocketState.CONNECTING || this._webSocket.readyState === StompSocketState.OPEN) {\n          this._closeOrDiscardWebsocket();\n        }\n      }\n    }\n  }, {\n    key: \"_closeWebsocket\",\n    value: function _closeWebsocket() {\n      this._webSocket.onmessage = function () {}; // ignore messages\n      this._webSocket.close();\n    }\n  }, {\n    key: \"discardWebsocket\",\n    value: function discardWebsocket() {\n      var _this4 = this;\n      if (typeof this._webSocket.terminate !== 'function') {\n        augmentWebsocket(this._webSocket, function (msg) {\n          return _this4.debug(msg);\n        });\n      }\n      // @ts-ignore - this method will be there at this stage\n      this._webSocket.terminate();\n    }\n  }, {\n    key: \"_transmit\",\n    value: function _transmit(params) {\n      var command = params.command,\n        headers = params.headers,\n        body = params.body,\n        binaryBody = params.binaryBody,\n        skipContentLengthHeader = params.skipContentLengthHeader;\n      var frame = new FrameImpl({\n        command: command,\n        headers: headers,\n        body: body,\n        binaryBody: binaryBody,\n        escapeHeaderValues: this._escapeHeaderValues,\n        skipContentLengthHeader: skipContentLengthHeader\n      });\n      var rawChunk = frame.serialize();\n      if (this.logRawCommunication) {\n        this.debug(\">>> \".concat(rawChunk));\n      } else {\n        this.debug(\">>> \".concat(frame));\n      }\n      if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n        rawChunk = new TextEncoder().encode(rawChunk);\n      }\n      if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n        this._webSocket.send(rawChunk);\n      } else {\n        var out = rawChunk;\n        while (out.length > 0) {\n          var chunk = out.substring(0, this.maxWebSocketChunkSize);\n          out = out.substring(this.maxWebSocketChunkSize);\n          this._webSocket.send(chunk);\n          this.debug(\"chunk sent = \".concat(chunk.length, \", remaining = \").concat(out.length));\n        }\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _this5 = this;\n      if (this.connected) {\n        try {\n          // clone before updating\n          var disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n          if (!disconnectHeaders.receipt) {\n            disconnectHeaders.receipt = \"close-\".concat(this._counter++);\n          }\n          this.watchForReceipt(disconnectHeaders.receipt, function (frame) {\n            _this5._closeWebsocket();\n            _this5._cleanUp();\n            _this5.onDisconnect(frame);\n          });\n          this._transmit({\n            command: 'DISCONNECT',\n            headers: disconnectHeaders\n          });\n        } catch (error) {\n          this.debug(\"Ignoring error during disconnect \".concat(error));\n        }\n      } else {\n        if (this._webSocket.readyState === StompSocketState.CONNECTING || this._webSocket.readyState === StompSocketState.OPEN) {\n          this._closeWebsocket();\n        }\n      }\n    }\n  }, {\n    key: \"_cleanUp\",\n    value: function _cleanUp() {\n      this._connected = false;\n      if (this._pinger) {\n        clearInterval(this._pinger);\n        this._pinger = undefined;\n      }\n      if (this._ponger) {\n        clearInterval(this._ponger);\n        this._ponger = undefined;\n      }\n    }\n  }, {\n    key: \"publish\",\n    value: function publish(params) {\n      var destination = params.destination,\n        headers = params.headers,\n        body = params.body,\n        binaryBody = params.binaryBody,\n        skipContentLengthHeader = params.skipContentLengthHeader;\n      var hdrs = Object.assign({\n        destination: destination\n      }, headers);\n      this._transmit({\n        command: 'SEND',\n        headers: hdrs,\n        body: body,\n        binaryBody: binaryBody,\n        skipContentLengthHeader: skipContentLengthHeader\n      });\n    }\n  }, {\n    key: \"watchForReceipt\",\n    value: function watchForReceipt(receiptId, callback) {\n      this._receiptWatchers[receiptId] = callback;\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(destination, callback) {\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      headers = Object.assign({}, headers);\n      if (!headers.id) {\n        headers.id = \"sub-\".concat(this._counter++);\n      }\n      headers.destination = destination;\n      this._subscriptions[headers.id] = callback;\n      this._transmit({\n        command: 'SUBSCRIBE',\n        headers: headers\n      });\n      var client = this;\n      return {\n        id: headers.id,\n        unsubscribe: function unsubscribe(hdrs) {\n          return client.unsubscribe(headers.id, hdrs);\n        }\n      };\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(id) {\n      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      headers = Object.assign({}, headers);\n      delete this._subscriptions[id];\n      headers.id = id;\n      this._transmit({\n        command: 'UNSUBSCRIBE',\n        headers: headers\n      });\n    }\n  }, {\n    key: \"begin\",\n    value: function begin(transactionId) {\n      var txId = transactionId || \"tx-\".concat(this._counter++);\n      this._transmit({\n        command: 'BEGIN',\n        headers: {\n          transaction: txId\n        }\n      });\n      var client = this;\n      return {\n        id: txId,\n        commit: function commit() {\n          client.commit(txId);\n        },\n        abort: function abort() {\n          client.abort(txId);\n        }\n      };\n    }\n  }, {\n    key: \"commit\",\n    value: function commit(transactionId) {\n      this._transmit({\n        command: 'COMMIT',\n        headers: {\n          transaction: transactionId\n        }\n      });\n    }\n  }, {\n    key: \"abort\",\n    value: function abort(transactionId) {\n      this._transmit({\n        command: 'ABORT',\n        headers: {\n          transaction: transactionId\n        }\n      });\n    }\n  }, {\n    key: \"ack\",\n    value: function ack(messageId, subscriptionId) {\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      headers = Object.assign({}, headers);\n      if (this._connectedVersion === Versions.V1_2) {\n        headers.id = messageId;\n      } else {\n        headers['message-id'] = messageId;\n      }\n      headers.subscription = subscriptionId;\n      this._transmit({\n        command: 'ACK',\n        headers: headers\n      });\n    }\n  }, {\n    key: \"nack\",\n    value: function nack(messageId, subscriptionId) {\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      headers = Object.assign({}, headers);\n      if (this._connectedVersion === Versions.V1_2) {\n        headers.id = messageId;\n      } else {\n        headers['message-id'] = messageId;\n      }\n      headers.subscription = subscriptionId;\n      return this._transmit({\n        command: 'NACK',\n        headers: headers\n      });\n    }\n  }]);\n  return StompHandler;\n}();","map":{"version":3,"names":["BYTE","FrameImpl","Parser","StompSocketState","Versions","augmentWebsocket","StompHandler","_client","_webSocket","config","_this","_classCallCheck","_connected","_serverFrameHandlers","CONNECTED","frame","debug","concat","headers","server","_connectedVersion","version","V1_2","_escapeHeaderValues","_setupHeartbeat","onConnect","MESSAGE","subscription","onReceive","_subscriptions","onUnhandledMessage","message","client","messageId","ack","arguments","length","undefined","nack","RECEIPT","callback","_receiptWatchers","onUnhandledReceipt","ERROR","onStompError","_counter","_partialData","_lastServerActivityTS","Date","now","stompVersions","connectHeaders","disconnectHeaders","heartbeatIncoming","heartbeatOutgoing","splitLargeFrames","maxWebSocketChunkSize","forceBinaryWSFrames","logRawCommunication","appendMissingNULLonIncoming","discardWebsocketOnCommFailure","onDisconnect","onWebSocketClose","onWebSocketError","onUnhandledFrame","_createClass","key","get","value","start","_this2","parser","rawFrame","fromRawFrame","serverFrameHandler","command","onmessage","evt","rawChunkAsString","data","ArrayBuffer","TextDecoder","decode","parseChunk","onclose","closeEvent","url","_cleanUp","onerror","errorEvent","onopen","Object","assign","supportedVersions","join","_transmit","_this3","V1_1","_headers$heartBeat$s","split","map","v","parseInt","_headers$heartBeat$s2","_slicedToArray","serverOutgoing","serverIncoming","ttl","Math","max","_pinger","setInterval","readyState","OPEN","send","LF","_ponger","delta","_closeOrDiscardWebsocket","discardWebsocket","_closeWebsocket","forceDisconnect","CONNECTING","close","_this4","terminate","msg","params","body","binaryBody","skipContentLengthHeader","escapeHeaderValues","rawChunk","serialize","TextEncoder","encode","out","chunk","substring","dispose","_this5","connected","receipt","watchForReceipt","error","clearInterval","publish","destination","hdrs","receiptId","subscribe","id","unsubscribe","begin","transactionId","txId","transaction","commit","abort","subscriptionId"],"sources":["C:\\Users\\paulm\\Documents\\Local Programming\\Websites\\SnowFinder\\frontend\\node_modules\\@stomp\\stompjs\\src\\stomp-handler.ts"],"sourcesContent":["import { BYTE } from './byte.js';\nimport { Client } from './client.js';\nimport { FrameImpl } from './frame-impl.js';\nimport { IMessage } from './i-message.js';\nimport { ITransaction } from './i-transaction.js';\nimport { Parser } from './parser.js';\nimport { StompHeaders } from './stomp-headers.js';\nimport { StompSubscription } from './stomp-subscription.js';\nimport {\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  IPublishParams,\n  IStompSocket,\n  IStompSocketMessageEvent,\n  IStomptHandlerConfig,\n  messageCallbackType,\n  StompSocketState,\n  wsErrorCallbackType,\n} from './types.js';\nimport { Versions } from './versions.js';\nimport { augmentWebsocket } from './augment-websocket.js';\n\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class StompHandler {\n  public debug: debugFnType;\n\n  public stompVersions: Versions;\n\n  public connectHeaders: StompHeaders;\n\n  public disconnectHeaders: StompHeaders;\n\n  public heartbeatIncoming: number;\n\n  public heartbeatOutgoing: number;\n\n  public onUnhandledMessage: messageCallbackType;\n\n  public onUnhandledReceipt: frameCallbackType;\n\n  public onUnhandledFrame: frameCallbackType;\n\n  public onConnect: frameCallbackType;\n\n  public onDisconnect: frameCallbackType;\n\n  public onStompError: frameCallbackType;\n\n  public onWebSocketClose: closeEventCallbackType;\n\n  public onWebSocketError: wsErrorCallbackType;\n\n  public logRawCommunication: boolean;\n\n  public splitLargeFrames: boolean;\n\n  public maxWebSocketChunkSize: number;\n\n  public forceBinaryWSFrames: boolean;\n\n  public appendMissingNULLonIncoming: boolean;\n\n  public discardWebsocketOnCommFailure: boolean;\n\n  get connectedVersion(): string | undefined {\n    return this._connectedVersion;\n  }\n  private _connectedVersion: string | undefined;\n\n  get connected(): boolean {\n    return this._connected;\n  }\n\n  private _connected: boolean = false;\n\n  private readonly _subscriptions: { [key: string]: messageCallbackType };\n  private readonly _receiptWatchers: { [key: string]: frameCallbackType };\n  private _partialData: string;\n  private _escapeHeaderValues: boolean;\n  private _counter: number;\n  private _pinger: any;\n  private _ponger: any;\n  private _lastServerActivityTS: number;\n\n  constructor(\n    private _client: Client,\n    public _webSocket: IStompSocket,\n    config: IStomptHandlerConfig\n  ) {\n    // used to index subscribers\n    this._counter = 0;\n\n    // subscription callbacks indexed by subscriber's ID\n    this._subscriptions = {};\n\n    // receipt-watchers indexed by receipts-ids\n    this._receiptWatchers = {};\n\n    this._partialData = '';\n\n    this._escapeHeaderValues = false;\n\n    this._lastServerActivityTS = Date.now();\n\n    this.debug = config.debug;\n    this.stompVersions = config.stompVersions;\n    this.connectHeaders = config.connectHeaders;\n    this.disconnectHeaders = config.disconnectHeaders;\n    this.heartbeatIncoming = config.heartbeatIncoming;\n    this.heartbeatOutgoing = config.heartbeatOutgoing;\n    this.splitLargeFrames = config.splitLargeFrames;\n    this.maxWebSocketChunkSize = config.maxWebSocketChunkSize;\n    this.forceBinaryWSFrames = config.forceBinaryWSFrames;\n    this.logRawCommunication = config.logRawCommunication;\n    this.appendMissingNULLonIncoming = config.appendMissingNULLonIncoming;\n    this.discardWebsocketOnCommFailure = config.discardWebsocketOnCommFailure;\n    this.onConnect = config.onConnect;\n    this.onDisconnect = config.onDisconnect;\n    this.onStompError = config.onStompError;\n    this.onWebSocketClose = config.onWebSocketClose;\n    this.onWebSocketError = config.onWebSocketError;\n    this.onUnhandledMessage = config.onUnhandledMessage;\n    this.onUnhandledReceipt = config.onUnhandledReceipt;\n    this.onUnhandledFrame = config.onUnhandledFrame;\n  }\n\n  public start(): void {\n    const parser = new Parser(\n      // On Frame\n      rawFrame => {\n        const frame = FrameImpl.fromRawFrame(\n          rawFrame,\n          this._escapeHeaderValues\n        );\n\n        // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n        if (!this.logRawCommunication) {\n          this.debug(`<<< ${frame}`);\n        }\n\n        const serverFrameHandler =\n          this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n        serverFrameHandler(frame);\n      },\n      // On Incoming Ping\n      () => {\n        this.debug('<<< PONG');\n      }\n    );\n\n    this._webSocket.onmessage = (evt: IStompSocketMessageEvent) => {\n      this.debug('Received data');\n      this._lastServerActivityTS = Date.now();\n\n      if (this.logRawCommunication) {\n        const rawChunkAsString =\n          evt.data instanceof ArrayBuffer\n            ? new TextDecoder().decode(evt.data)\n            : evt.data;\n        this.debug(`<<< ${rawChunkAsString}`);\n      }\n\n      parser.parseChunk(\n        evt.data as string | ArrayBuffer,\n        this.appendMissingNULLonIncoming\n      );\n    };\n\n    this._webSocket.onclose = (closeEvent): void => {\n      this.debug(`Connection closed to ${this._webSocket.url}`);\n      this._cleanUp();\n      this.onWebSocketClose(closeEvent);\n    };\n\n    this._webSocket.onerror = (errorEvent): void => {\n      this.onWebSocketError(errorEvent);\n    };\n\n    this._webSocket.onopen = () => {\n      // Clone before updating\n      const connectHeaders = (Object as any).assign({}, this.connectHeaders);\n\n      this.debug('Web Socket Opened...');\n      connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n      connectHeaders['heart-beat'] = [\n        this.heartbeatOutgoing,\n        this.heartbeatIncoming,\n      ].join(',');\n      this._transmit({ command: 'CONNECT', headers: connectHeaders });\n    };\n  }\n\n  private readonly _serverFrameHandlers: {\n    [key: string]: frameCallbackType;\n  } = {\n    // [CONNECTED Frame](https://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n    CONNECTED: frame => {\n      this.debug(`connected to server ${frame.headers.server}`);\n      this._connected = true;\n      this._connectedVersion = frame.headers.version;\n      // STOMP version 1.2 needs header values to be escaped\n      if (this._connectedVersion === Versions.V1_2) {\n        this._escapeHeaderValues = true;\n      }\n\n      this._setupHeartbeat(frame.headers);\n      this.onConnect(frame);\n    },\n\n    // [MESSAGE Frame](https://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n    MESSAGE: frame => {\n      // the callback is registered when the client calls\n      // `subscribe()`.\n      // If there is no registered subscription for the received message,\n      // the default `onUnhandledMessage` callback is used that the client can set.\n      // This is useful for subscriptions that are automatically created\n      // on the browser side (e.g. [RabbitMQ's temporary\n      // queues](https://www.rabbitmq.com/stomp.html)).\n      const subscription = frame.headers.subscription;\n      const onReceive =\n        this._subscriptions[subscription] || this.onUnhandledMessage;\n\n      // bless the frame to be a Message\n      const message = frame as IMessage;\n\n      const client = this;\n      const messageId =\n        this._connectedVersion === Versions.V1_2\n          ? message.headers.ack\n          : message.headers['message-id'];\n\n      // add `ack()` and `nack()` methods directly to the returned frame\n      // so that a simple call to `message.ack()` can acknowledge the message.\n      message.ack = (headers: StompHeaders = {}): void => {\n        return client.ack(messageId, subscription, headers);\n      };\n      message.nack = (headers: StompHeaders = {}): void => {\n        return client.nack(messageId, subscription, headers);\n      };\n      onReceive(message);\n    },\n\n    // [RECEIPT Frame](https://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n    RECEIPT: frame => {\n      const callback = this._receiptWatchers[frame.headers['receipt-id']];\n      if (callback) {\n        callback(frame);\n        // Server will acknowledge only once, remove the callback\n        delete this._receiptWatchers[frame.headers['receipt-id']];\n      } else {\n        this.onUnhandledReceipt(frame);\n      }\n    },\n\n    // [ERROR Frame](https://stomp.github.com/stomp-specification-1.2.html#ERROR)\n    ERROR: frame => {\n      this.onStompError(frame);\n    },\n  };\n\n  private _setupHeartbeat(headers: StompHeaders): void {\n    if (\n      headers.version !== Versions.V1_1 &&\n      headers.version !== Versions.V1_2\n    ) {\n      return;\n    }\n\n    // It is valid for the server to not send this header\n    // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n    if (!headers['heart-beat']) {\n      return;\n    }\n\n    // heart-beat header received from the server looks like:\n    //\n    //     heart-beat: sx, sy\n    const [serverOutgoing, serverIncoming] = headers['heart-beat']\n      .split(',')\n      .map((v: string) => parseInt(v, 10));\n\n    if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n      const ttl: number = Math.max(this.heartbeatOutgoing, serverIncoming);\n      this.debug(`send PING every ${ttl}ms`);\n      this._pinger = setInterval(() => {\n        if (this._webSocket.readyState === StompSocketState.OPEN) {\n          this._webSocket.send(BYTE.LF);\n          this.debug('>>> PING');\n        }\n      }, ttl);\n    }\n\n    if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n      const ttl: number = Math.max(this.heartbeatIncoming, serverOutgoing);\n      this.debug(`check PONG every ${ttl}ms`);\n      this._ponger = setInterval(() => {\n        const delta = Date.now() - this._lastServerActivityTS;\n        // We wait twice the TTL to be flexible on window's setInterval calls\n        if (delta > ttl * 2) {\n          this.debug(`did not receive server activity for the last ${delta}ms`);\n          this._closeOrDiscardWebsocket();\n        }\n      }, ttl);\n    }\n  }\n\n  private _closeOrDiscardWebsocket() {\n    if (this.discardWebsocketOnCommFailure) {\n      this.debug(\n        'Discarding websocket, the underlying socket may linger for a while'\n      );\n      this.discardWebsocket();\n    } else {\n      this.debug('Issuing close on the websocket');\n      this._closeWebsocket();\n    }\n  }\n\n  public forceDisconnect() {\n    if (this._webSocket) {\n      if (\n        this._webSocket.readyState === StompSocketState.CONNECTING ||\n        this._webSocket.readyState === StompSocketState.OPEN\n      ) {\n        this._closeOrDiscardWebsocket();\n      }\n    }\n  }\n\n  public _closeWebsocket() {\n    this._webSocket.onmessage = () => {}; // ignore messages\n    this._webSocket.close();\n  }\n\n  public discardWebsocket() {\n    if (typeof this._webSocket.terminate !== 'function') {\n      augmentWebsocket(this._webSocket, (msg: string) => this.debug(msg));\n    }\n\n    // @ts-ignore - this method will be there at this stage\n    this._webSocket.terminate();\n  }\n\n  private _transmit(params: {\n    command: string;\n    headers?: StompHeaders;\n    body?: string;\n    binaryBody?: Uint8Array;\n    skipContentLengthHeader?: boolean;\n  }): void {\n    const { command, headers, body, binaryBody, skipContentLengthHeader } =\n      params;\n    const frame = new FrameImpl({\n      command,\n      headers,\n      body,\n      binaryBody,\n      escapeHeaderValues: this._escapeHeaderValues,\n      skipContentLengthHeader,\n    });\n\n    let rawChunk = frame.serialize();\n\n    if (this.logRawCommunication) {\n      this.debug(`>>> ${rawChunk}`);\n    } else {\n      this.debug(`>>> ${frame}`);\n    }\n\n    if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n      rawChunk = new TextEncoder().encode(rawChunk);\n    }\n\n    if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n      this._webSocket.send(rawChunk);\n    } else {\n      let out = rawChunk as string;\n      while (out.length > 0) {\n        const chunk = out.substring(0, this.maxWebSocketChunkSize);\n        out = out.substring(this.maxWebSocketChunkSize);\n        this._webSocket.send(chunk);\n        this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n      }\n    }\n  }\n\n  public dispose(): void {\n    if (this.connected) {\n      try {\n        // clone before updating\n        const disconnectHeaders = (Object as any).assign(\n          {},\n          this.disconnectHeaders\n        );\n\n        if (!disconnectHeaders.receipt) {\n          disconnectHeaders.receipt = `close-${this._counter++}`;\n        }\n        this.watchForReceipt(disconnectHeaders.receipt, frame => {\n          this._closeWebsocket();\n          this._cleanUp();\n          this.onDisconnect(frame);\n        });\n        this._transmit({ command: 'DISCONNECT', headers: disconnectHeaders });\n      } catch (error) {\n        this.debug(`Ignoring error during disconnect ${error}`);\n      }\n    } else {\n      if (\n        this._webSocket.readyState === StompSocketState.CONNECTING ||\n        this._webSocket.readyState === StompSocketState.OPEN\n      ) {\n        this._closeWebsocket();\n      }\n    }\n  }\n\n  private _cleanUp() {\n    this._connected = false;\n\n    if (this._pinger) {\n      clearInterval(this._pinger);\n      this._pinger = undefined;\n    }\n    if (this._ponger) {\n      clearInterval(this._ponger);\n      this._ponger = undefined;\n    }\n  }\n\n  public publish(params: IPublishParams): void {\n    const { destination, headers, body, binaryBody, skipContentLengthHeader } =\n      params;\n    const hdrs: StompHeaders = (Object as any).assign({ destination }, headers);\n    this._transmit({\n      command: 'SEND',\n      headers: hdrs,\n      body,\n      binaryBody,\n      skipContentLengthHeader,\n    });\n  }\n\n  public watchForReceipt(receiptId: string, callback: frameCallbackType): void {\n    this._receiptWatchers[receiptId] = callback;\n  }\n\n  public subscribe(\n    destination: string,\n    callback: messageCallbackType,\n    headers: StompHeaders = {}\n  ): StompSubscription {\n    headers = (Object as any).assign({}, headers);\n\n    if (!headers.id) {\n      headers.id = `sub-${this._counter++}`;\n    }\n    headers.destination = destination;\n    this._subscriptions[headers.id] = callback;\n    this._transmit({ command: 'SUBSCRIBE', headers });\n    const client = this;\n    return {\n      id: headers.id,\n\n      unsubscribe(hdrs) {\n        return client.unsubscribe(headers.id, hdrs);\n      },\n    };\n  }\n\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\n    headers = (Object as any).assign({}, headers);\n\n    delete this._subscriptions[id];\n    headers.id = id;\n    this._transmit({ command: 'UNSUBSCRIBE', headers });\n  }\n\n  public begin(transactionId: string): ITransaction {\n    const txId = transactionId || `tx-${this._counter++}`;\n    this._transmit({\n      command: 'BEGIN',\n      headers: {\n        transaction: txId,\n      },\n    });\n    const client = this;\n    return {\n      id: txId,\n      commit(): void {\n        client.commit(txId);\n      },\n      abort(): void {\n        client.abort(txId);\n      },\n    };\n  }\n\n  public commit(transactionId: string): void {\n    this._transmit({\n      command: 'COMMIT',\n      headers: {\n        transaction: transactionId,\n      },\n    });\n  }\n\n  public abort(transactionId: string): void {\n    this._transmit({\n      command: 'ABORT',\n      headers: {\n        transaction: transactionId,\n      },\n    });\n  }\n\n  public ack(\n    messageId: string,\n    subscriptionId: string,\n    headers: StompHeaders = {}\n  ): void {\n    headers = (Object as any).assign({}, headers);\n\n    if (this._connectedVersion === Versions.V1_2) {\n      headers.id = messageId;\n    } else {\n      headers['message-id'] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    this._transmit({ command: 'ACK', headers });\n  }\n\n  public nack(\n    messageId: string,\n    subscriptionId: string,\n    headers: StompHeaders = {}\n  ): void {\n    headers = (Object as any).assign({}, headers);\n\n    if (this._connectedVersion === Versions.V1_2) {\n      headers.id = messageId;\n    } else {\n      headers['message-id'] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    return this._transmit({ command: 'NACK', headers });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}